/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.task_management;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author login
 */
public class TaskTable extends javax.swing.JFrame {

    EmployeeClass ManagerData;
    int role, selectedRow;
    ConnectionClass connectionClass = ConnectionClass.getInstance();
    ArrayList< TaskClass> taskdata = new ArrayList<>();

    /**
     * Creates new form TaskTable
     */
    public TaskTable() {
        initComponents();

    }

    public TaskTable(int role, EmployeeClass ManagerData) {
        initComponents();
        this.ManagerData = ManagerData;
        this.role = role;
//                    you.setVisible(false);
        if (role == 1) {
            createTable();
        }
        if (role == 2) {
            createTable();
//            createAssignTable();
        }
        if (role == 3) {
            createAssignTable();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Go to Home ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Completed Tasks ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("View pending tasks ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        switch (role) {
            case 1 -> {
                AdminPanel admin = new AdminPanel(ManagerData);
                admin.setVisible(true);
                this.dispose();
            }
            case 2 -> {
                ManagerPanel manager = new ManagerPanel(ManagerData);
                manager.setVisible(true);
                this.dispose();
            }
            default -> {
                EmployeePanel manager = new EmployeePanel(ManagerData);
                manager.setVisible(true);
                this.dispose();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        StatusTable status = new StatusTable(ManagerData, 1);
        status.setVisible(true);
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        StatusTable status = new StatusTable(ManagerData, 0);
        status.setVisible(true);
        this.dispose(); // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void createTable() {
        if (role == 1) {
            String statement = "SELECT * FROM tasks";

            try {
                PreparedStatement ps = connectionClass.connection.prepareStatement(statement);
                ResultSet resultSet = ps.executeQuery();

                String[] headerName = {"ID", "Title", "Description", "Start Date", "Due Date", "Status"};
                DefaultTableModel model = new DefaultTableModel(null, headerName);
                table.setModel(model);

                while (resultSet.next()) {
                    TaskClass data = new TaskClass();
                    data.setId(resultSet.getInt("ID"));
                    data.setTitle(resultSet.getString("title"));
                    data.setDescription(resultSet.getString("description"));
                    data.setStatus(resultSet.getInt("status"));
                    data.setStratDate(resultSet.getString("startDate"));
                    data.setDueDate(resultSet.getString("dueDate"));

                    taskdata.add(data);
                }

                Object[] row = new Object[6];
                for (int i = 0; i < taskdata.size(); i++) {
                    row[0] = taskdata.get(i).getId();
                    row[1] = taskdata.get(i).getTitle();
                    row[2] = taskdata.get(i).getDescription();
                    row[3] = taskdata.get(i).getStratDate();
                    row[4] = taskdata.get(i).getDueDate();

                    if (taskdata.get(i).getStatus() == 0) {
                        row[5] = "Pending";
                    } else {
                        row[5] = "Completed";
                    }
                    model.addRow(row);
                }
            } catch (SQLException ex) {
                Logger.getLogger(TaskTable.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            String statement = "SELECT * FROM tasks WHERE managerID =?";

            try {
                PreparedStatement ps = connectionClass.connection.prepareStatement(statement);
                ps.setInt(1, ManagerData.getId());
                ResultSet resultSet = ps.executeQuery();

                String[] headerName = {"ID", "Title", "Description", "Start Date", "Due Date","Status"};
                DefaultTableModel model = new DefaultTableModel(null, headerName);
                table.setModel(model);

                while (resultSet.next()) {
                    TaskClass data = new TaskClass();
                    data.setId(resultSet.getInt("ID"));
                    data.setTitle(resultSet.getString("title"));
                    data.setDescription(resultSet.getString("description"));
                    data.setStatus(resultSet.getInt("status"));
                    data.setStratDate(resultSet.getString("startDate"));
                    data.setDueDate(resultSet.getString("dueDate"));
                    taskdata.add(data);
                }

                Object[] row = new Object[6];
                for (int i = 0; i < taskdata.size(); i++) {
                    row[0] = taskdata.get(i).getId();
                    row[1] = taskdata.get(i).getTitle();
                    row[2] = taskdata.get(i).getDescription();
                    row[3] = taskdata.get(i).getStratDate();
                    row[4] = taskdata.get(i).getDueDate();

                    if (taskdata.get(i).getStatus() == 0) {
                        row[5] = "Pending";
                    } else {
                        row[5] = "Completed";
                    }
                    model.addRow(row);
                }
            } catch (SQLException ex) {
                Logger.getLogger(TaskTable.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    public void createAssignTable() {
        String statement = "SELECT * FROM tasks WHERE employeeID =?";

        try {
            PreparedStatement ps = connectionClass.connection.prepareStatement(statement);
            ps.setInt(1, ManagerData.getId());
            ResultSet resultSet = ps.executeQuery();

            String[] headerName = {"ID", "Title", "Description", "Start Date", "Due Date","Status"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
            table.setModel(model);

            while (resultSet.next()) {
                TaskClass data = new TaskClass();
                data.setId(resultSet.getInt("ID"));
                data.setTitle(resultSet.getString("title"));
                data.setDescription(resultSet.getString("description"));
                data.setStatus(resultSet.getInt("status"));
                data.setStratDate(resultSet.getString("startDate"));
                data.setDueDate(resultSet.getString("dueDate"));
                taskdata.add(data);
            }

            Object[] row = new Object[6];
            for (int i = 0; i < taskdata.size(); i++) {
                row[0] = taskdata.get(i).getId();
                row[1] = taskdata.get(i).getTitle();
                row[2] = taskdata.get(i).getDescription();
                row[3] = taskdata.get(i).getStratDate();
                row[4] = taskdata.get(i).getDueDate();

                if (taskdata.get(i).getStatus() == 0) {
                    row[5] = "Pending";
                } else {
                    row[5] = "Completed";
                }
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TaskTable.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
